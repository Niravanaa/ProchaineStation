name: Semantic Release and Unity Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install semantic-release
        run: npm install -g semantic-release@17 @semantic-release/git@10

      - name: Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: StandaloneWindows64
          projectPath: ./Prochaine Station/

      - uses: actions/upload-artifact@v4
        with:
          name: ProchaineStation
          path: build

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Download Latest Artifact
        run: |
          # Fetch the latest artifact URL
          artifact_url=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" | jq -r '.artifacts[0].archive_download_url')

          # Download the latest artifact
          curl -L -o ProchaineStation.zip -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$artifact_url"

      - name: Get Latest Release ID
        id: get_release_id
        run: |
          release_info=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/releases/latest")

          release_id=$(echo "$release_info" | jq -r '.id')
          echo "::set-output name=release_id::$release_id"

          tag_name=$(echo "$release_info" | jq -r '.tag_name')
          echo "::set-output name=tag_name::$tag_name"

      - name: Get Latest Release Upload URL
        id: get_release_upload_url
        run: |
          release_upload_url=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.upload_url')

          echo "::set-output name=release_upload_url::$release_upload_url"

      - name: Upload Artifact to Release
        if: steps.get_release_upload_url.outputs.release_upload_url != null
        run: |
          release_upload_url=$(echo "${{ steps.get_release_upload_url.outputs.release_upload_url }}" | sed 's/{?name,label}//')
      
          # Get tag name
          tag_name="${{ steps.get_release_id.outputs.tag_name }}"
      
          # Rename artifact file with tag name
          mv ProchaineStation.zip "ProchaineStation-${tag_name}.zip"
      
          # Upload the renamed artifact to the release
          curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/zip" \
          --data-binary "@ProchaineStation-${tag_name}.zip" "$release_upload_url?name=ProchaineStation-${tag_name}.zip"
